
Rank Name              Elo    +    - games score oppo. draws
   1 Fruit 2.1         329    2    2 105433   82%    45   10%
   2 Floyd xa416cb63   100    4    4 24000   43%   164   19%
   3 Floyd x354d5f3a    93    4    4 24000   42%   164   19%
   4 Floyd xc6c5dae2    87    4    4 24000   42%   164   19%
   5 Floyd x7c96b2ca    83    4    4 24000   41%   164   20%
   6 Floyd xb171e499    75    7    7  9486   40%   164   19%
   7 Floyd x32aa5271    73    7    7  9375   40%   164   19%
   8 Floyd x0e0dc088    63    4    4 24000   39%   164   19%
   9 Floyd x800ecb47    56    4    4 24000   38%   164   19%
  10 Floyd 0.8           0    2    2 105428   39%    82   23%
  11 Floyd 0.7        -150    4    4 36000   38%    -8   13%
  12 Floyd 0.6        -354    6    6 12000   24%  -150   18%
                 Fr Fl Fl Fl Fl Fl Fl Fl Fl Fl Fl Fl
Fruit 2.1          100100100100100100100100100100100
Floyd xa416cb63   0    98 99 99 99 99100100100100100
Floyd x354d5f3a   0  1    98 99 99 99100100100100100
Floyd xc6c5dae2   0  0  1    89 99 99 99100100100100
Floyd x7c96b2ca   0  0  0 10    97 99 99100100100100
Floyd xb171e499   0  0  0  0  2    65 99 99100100100
Floyd x32aa5271   0  0  0  0  0 34    99 99100100100
Floyd x0e0dc088   0  0  0  0  0  0  0    98100100100
Floyd x800ecb47   0  0  0  0  0  0  0  1   100100100
Floyd 0.8         0  0  0  0  0  0  0  0  0   100100
Floyd 0.7         0  0  0  0  0  0  0  0  0  0   100
Floyd 0.6         0  0  0  0  0  0  0  0  0  0  0



Floud 0.9 dev status:
   Version         Elo Change
 0 Floyd 0.8         0 reference
 1 Floyd x42835a08  11 uniform reductions
 2 Floyd x800ecb47  56 history counters
 3 Floyd x0e0dc088  63 integrate older tuning
 4 Floyd x32aa5271  73 depth-dependent null reduction
 5 Floyd xb171e499  75 evaluation-guarded null move, i.s.o. node type
 6 Floyd x7c96b2ca  83 unconditional null move, i.s.o. evaluation
 8 Floyd xc6c5dae2  87 simple delta pruning
 9 Floyd x354d5f3a  93 delta pruning option 3 (pseudo fail-soft, aka xec39d0d0) 
10 Floyd xaef137c2 100 Slightly tighter bound (aka as xa416cb63)
11 Floyd x9xxxxxxx     see * 1500 + 1500

--
Score of Floyd xaef137c2 vs Floyd xec39d0d0: 302 - 336 - 362  [0.483] 1000
ELO difference: -12
Finished match

marcelk@beobook3:~> los 302 336 362
Winning fraction: 0.483
Elo difference: -11.8174
p-value: 0.0891395

Inconclusive
--
Score of Floyd xdc1f8c8e vs Floyd xec39d0d0: 318 - 357 - 325  [0.480] 1000
ELO difference: -14
Finished match

marcelk@beobook3:~> los 318 357 325
Winning fraction: 0.4805
Elo difference: -13.5569
p-value: 0.0666635
--
But...:
marcelk@beobook3:~> los 620 693 687
Winning fraction: 0.48175
Elo difference: -12.687
p-value: 0.0219729

------------------------------------------------------------------------
        Search
------------------------------------------------------------------------

|Todo| Try (see * 1500 + 1500) again as in xec39d0d0 [search]

|Todo| Checks in qsearch, at least in PV and after null move [search]

#define minDepth -7

scout:
        if (inCheck)
                qSearchWithCheck // horizon()
        else
                qSearch

qSearchWithCheck() # No TT?
        filter, keep good checks and good captures
        for (move in moves)
                if (inCheck || giveCheck)
                        qSearchWithCheck
                else
                        qSearch

qsearch()

|Todo| Checks after null move [search]

|Todo| Collect statistics for delta pruning [search]

|Todo| Exponential history counters [search]

|Todo| Retry evaluation filtering for null move [search]

Cache evaluations to prevent the NPS drop

|Todo| Staged null move [search]

One with large reduction, second with lower R

        R1 = 4, R2 = 2
Score of Floyd x833a9c04 vs Floyd 0.8: 459 - 260 - 281  [0.600] 1000
ELO difference: 70
Finished match

floyd1 x0e0dc088 vanilla nullmove (R=2)
floyd2 x833a9c04 staged nullmove (R=4, R=2)

Score of floyd1 vs floyd2: 343 - 361 - 296  [0.491] 1000
ELO difference: -6
Finished match

Winning fraction: 0.491
Elo difference: -6.25452
p-value: 0.248759

|Todo| Futility qSearch

|Todo| Futility search

|Todo| More agressuve null move tuning

|Todo| More agressive LMR tuning

|Todo| Move ordering based on delta eval [search]

Then also cache evaluation in ttable

|Todo| Basic counter move [search]

|Todo| Introduce move flags for 32 bit

- Simplify UCI move formatting

|Todo| Extend move flags

- Extend flags beyond

Concept choice: keep flags with move or in seperate table?

staticMoveScore (SEE) range
min: -18
max: +17
--> 6 bits

          search                     board
+------------+------------+------------+-------------+
| SEE/killer |   history  | properties |     move    |
+------------+------------+------------+-------------+
      16            16          16           16

                                        fedcba9876543210
                                        ----------xxxxxx to square
                                        ----xxxxxx------ from square
                                        ---x------------ specialMove
                                        -xx------------- promotion piece
                                        -xx------------- piece type: K Q RB P

                             upCapture (always good)
                             trade
                             downCapture
                             gives check
                             safe move
                             strong move
                             weak move
                             piece type (KQRNBP)
                           fedcba9876543210
                           -----------x----
                           -----------x----
                           ------------x---
                           -------------xxx
 fedcba9876543210
 -x-------------- hash table move
 --xxxx---------- SEE
 --xxxx---------- SEE
 ----------------
 ------------xxxx

1. Sort a long key.
        - Makes everyone migrate to Move_t
        + Can use standard qsort
2. Sort only the scores, with back reference to the move (index)
3. Sort through a history table, requires modified qsort
4. Hide all in a move picker object
5. Place scores at index+256
        - Doesn't work with qsort

Desirable properties
- generateMoves still generates ints (32bit)
- can use stdlib qsort

|Todo| Introduction of material table [speed]

Floyd is slow, but we should aim to keep it above 1Mnps

|Todo| Null move verification

if (depth >= 12)
        verificationDepth = max(0, depth/2 - 6)
        if (verificationDepth > 2) {

        }

Test with zugzwang positions

|Todo| Inverse delta pruning [search]

        if (nrMoves > 0 && !inCheck) {
                // Inverse delta pruning
                assert(moveList[0] >= 0);
                int minDelta = (moveList[0] >> 26) * 1000 - 1000;
                if (minDelta > alpha - bestScore)
                        return ttWrite(self, slot, 0, bestScore + minDelta, alpha, alpha+1);
        }

|Todo| Upcoming repetition detection

------------------------------------------------------------------------
        Evaluate
------------------------------------------------------------------------

|Todo| Sync KPK from pfkpk updates [qa]

|Todo| Rook or Queen and/vs pawn span [evaluate]

|Todo| Strong squares / outposts [evaluate]

Isn't this simply "piece supported by own pawn"?
 - Consider location. E.g. 3rd rank is probably not important
 - Bonus per rank: 6p model

|Todo| Sneaker (hidden passed pawn) [evaluate]

        Passed pawn, if not blocked
        Helper can sacrifice itself to make a passer

|Todo| Candidate passer [evaluate]

Two types:
1. Floyd type: check that the helpers are on the right spot
2. Fruit type: just see if the helpers outnumber the sentries

|Todo| Passer scoring based on table instead of quad [evaluate]

|Todo| Pawn levers [evaluate]

|Todo| Board control: what can I drop on a square [evaluate]

|Todo| Potential open files [evaluate]

- potential open files for rooks
Require that the number of helpers is at least the number of sentries

Potential open file:
        - Not doubled pawn
        - The pawn can advance to meet a sentry
                Why wouldn't it be able to advance?
                        Only if there is no sentry
        - In that position, if there are two sentries
                Then there must also be support of a helper
        Thats it?
        - Sentry must not be mobile (but then we can make a passer)

        Score by file (a-file is probably very good)
        Score by rank of the pawn
        Score by rank of the sentry?
        Score by difference in moves/squares?

|Todo| Piece vs pawn center

Center X and center Y
knightToPawnCenter
kingToPawnCenter

|Todo| Proximities

Pawn center (rank, file)
Passers
Weak pawn (kings)

|Todo| Piece mobility [evaluate]

Mobility = what can I actually move to a square, safely

|Todo| Attacking a non-mobile pawn
|Todo| Attacks on backward/weak pawns

|Todo| Attack x piece matrix [evaluate]

|Todo| Threats [evaluate]

Threat: weaker attacks stronger piece or undefended piece

1st threat
2nd threat
3rd threat

|Todo| Undrawness of material advantage [evaluate]

Instead of just "phase"

|Todo| Check Rebel evaluation features [evaluate]

Ref: http://www.top-5000.nl/authors/rebel/chess840.htm

|Todo| Check Stockfish evaluation features [evaluate]

|Todo| Knight mobility (vanilla)
|Todo| Trapped bishop (we already have it partly in the PST)
|Todo| Blocked bishop (bishop behind immobile pawn)
|Todo| Opposite bishop depends on pawn count difference
|Todo| Rook Mobility
|Todo| Rook on 7th when king on back rank
|Todo| Penalty for lacking horizontal mobility (crafty)
|Todo| Blocked rook (as in Rookie)
|Todo| Queen on 7th when king on back rank
|Todo| Queen Mobility
|Todo| Make the passer/king distance dependent on passer rank (Rybka)
|Todo| Control of squares on open file [evaluate]

|Todo| Overextended pawns which need to be defended by a piece

|Todo| Pins

|Todo| KRPKR

"The only rule that applies in this ending: if the black king is
in front of the white pawn the game is a draw"

|Todo| Pawn storm

|Todo| Bring back the symmetry to reduce parameters
|Todo| Simplify bishop tables again

|Todo| Add white/black testing [qa,evaluate]

|Todo| Add left/right testing [qa,evaluate]

|Todo| Train specific exchange compensations

R vs B
R vs B+P
R vs B+PP
R vs N
R vs N+P
R vs N+PP
+with or without bishop pair

More complex:
RP vs NN
Q vs RR

|Todo| Alekhine's Gun [evaluate]

"I should mention, too that you do need to handle stacked attackers
such as "Alekhine's Gun". This is commonly done by considering own
rooks as transparent when calculating rank/file attacks, as well
as as Queens being "transparent" when considering Bishop attacks."

http://talkchess.com/forum/viewtopic.php?p=665703#665703

|Todo| Rook doubling on open files [evaluate]

------------------------------------------------------------------------
        Other
------------------------------------------------------------------------

|Todo| Sync KPK with pfkpk git archive

Geometry bug

|Todo| Another minor parsing hickup [bug]

debug on
position fen 2rq1rk1/1b2ppbp/1p3np1/pN1p4/2PPn3/BQ2PN1P/P3BPP1/2R2RK1 w - - 5 15 moves f3e5 e4d2 b3c2 d2f1 g1f1
info sting input position fen 2rq1rk1/1b2ppbp/1p3np1/pN1p4/2PPn3/BQ2PN1P/P3BPP1/2R2RK1 w - - 5 15 moves f3e5 e4d2 b3c2 d2f1 g1f1
info string Illegal move

|Todo| Win64 version from Makefile [win64]

Joost: Intel C compiler versie 15
https://software.intel.com/en-us/qualify-for-free-software

|Todo| Learn how to branch in git :-) [git]

Make Docs/branching.txt

http://nvie.com/posts/a-successful-git-branching-model/

"master": releases
"patch": for fixes on release. Short lived. Push into int and into master
        Fixes on release give a new release
"int": upcoming release branch, for integration testing
        push into master and dev
"dev": fast-paced changes
        merge dev into int to start preparing next release
        Then only allow fixes
        Make release notes
        Merge into master

Make branch:
        git checkout dev
        git checkout -b v0.8

Merge release into master:
        git checkout master
        git merge --no-ff v0.8
        git branch -d v0.8
        git push origin dev

|Todo| Granularity of win32 clock too low? [win32]

|Todo| Terminology: coefficient or parameter [qa]

|Todo| Consider gradient descent [tune]

Or better:
https://en.wikipedia.org/wiki/Conjugate_gradient_method

|Todo| Test tuner on Rosenbrock function [tune]

https://en.wikipedia.org/wiki/Rosenbrock_function

|Todo| Parameter graphs (tune.dir) [tune]

|Todo| Reject illegal positions [usability]

- pawns on rank 1 and 8
- not one king per side
- too many pawns or promoted pieces
- side to move attacks other king

- also update chessmoves module for this

|Todo| Accept a lambda as value to `info' in search() [python]

As a callback interface with the search info data

|Todo| Consider persistent alarm thread [speed]

Profile first

|Todo| Consider persistent search thread [speed]

Profile first

|Todo| Implement 50 move rule [50move]

Also recognize 50-move as a game during search.

|Todo| Compile on FreeBSD [qa]

|Todo| eggs metadata [python]

License: UNKNOWN
Description: UNKNOWN
Platform: UNKNOWN

|Todo| Some remaining failures in the mate5 test set:

8/3N4/6p1/1p5p/5b1p/P2k2n1/1B6/3KQ3 w - - acn 138553; acs 0; bm Ba1; ce 32758; dm 5; pv Ba1 h3 Nf6 b4 Qe6 Bd2 Qd6+ Ke3 Qxg3#;
2RR2bK/b1N4p/1pkNp1r1/p3p2r/6P1/n1p5/n5P1/6B1 w - - acn 330710; acs 1; bm g3; ce 32758; dm 5; pv g3 h6 Ncb5+ Kd5 Nxc3+ Nxc3 Nc4+ Ke4 Nd2#;
6RQ/6pP/p5K1/1r2p2N/p3k3/R7/B7/B7 w - - acn 106602; acs 0; bm Qxg7 Rc3; ce 32758; dm 5; pv Rc3 Rb6+ Kg5 Rg6+ Kxg6 a3 Rd8 a5 Bb1#;

|Todo| Move logit() from evaluate to rootSearch [speed]

|Todo| Null move for zugzwang

|Todo| Calculate the impact of each parameter [tune]

Lazy method: set each to 0 and compute the delta of the residual

|Todo| Auto jitter monitoring [timecontrol]

Keep track of maximum jitter in a session, and use that instead of the
2.5 seconds safety margin. Then see if we can reduce 2.5 to 0.5 with this
and gain some fake elo at ultra fast tc.

|Todo| Principle component analysis [tune]

For decorrelation of parameters

|Todo| Clearer handling of minmovetime [timecontrol]

Now we increase safety to 20 s when increment is (almost) 0.
This is double indirect:
1. Associating "inc=0" with "minmovetime"
2. Putting the solution in "safety", instead of elsewhere
There must be a cleaner way

|Todo| False mate score [bug]

Floyd (2244) vs. honestFrnd (1341) --- Thu Jan 28, 23:07 ??? 2016
Rated blitz match, initial time: 5 minutes, increment: 0 seconds.

Move  Floyd                   honestFrnd
----  ---------------------   ---------------------
  1.  e4      (0:00.000)      e5      (0:00.000)
  2.  Nf3     (0:00.100)      d6      (0:00.966)
  3.  d4      (0:00.100)      Nd7     (0:02.163)
  4.  Bc4     (0:00.100)      f6      (0:00.887)
  5.  Nc3     (0:00.100)      c6      (0:00.960)
  6.  a4      (0:11.282)      Ne7     (0:00.652)
  7.  O-O     (0:09.515)      Qc7     (0:00.683)
  8.  dxe5    (0:07.084)      dxe5    (0:01.423)
  9.  h4      (0:15.474)      b6      (0:08.678)
 10.  Be3     (0:11.819)      Ng6     (0:03.429)
 11.  Qe2     (0:10.984)      Be7     (0:03.578)
 12.  Rad1    (0:05.970)      Nc5     (0:08.167)
 13.  h5      (0:05.513)      Nf8     (0:02.080)
 14.  h6      (0:05.587)      g6      (0:02.819)
 15.  b4      (0:06.126)      Nce6    (0:03.189)
 16.  Bb3     (0:05.095)      Bxb4    (0:02.835)
 17.  Nb5     (0:05.740)      cxb5    (0:03.939)
 18.  Qxb5+   (0:11.572)      Bd7     (0:29.267)
 19.  Qxb4    (0:04.703)      Nc5     (0:16.457)
 20.  Bxc5    (0:32.666)      Qxc5    (0:03.680)
 21.  Qe1     (0:26.072)      Ne6     (0:04.932)
 22.  Rd5     (0:02.704)      Qc7     (0:11.412)
 23.  Qb4     (0:08.736)      a5      (0:16.546)
 24.  Qd6     (0:02.686)      Qxd6    (0:03.811)
 25.  Rxd6    (0:06.903)      Ke7     (0:16.178)
 26.  Rfd1    (0:03.852)      Nc5     (0:11.258)
 27.  Rxb6    (0:12.258)      Bg4     (0:02.805)
 28.  Rb5     (0:02.248)      Nxe4    (0:03.003)
 29.  Rb7+    (0:03.457)      Ke8     (0:06.774)
 30.  Bd5     (0:02.883)      Ng5     (0:10.945)

Floyd(C)(2244)[327] whispers: depth=8 score=3.17 time=3.32 node=257743 speed=77633 pv=Nxg5 fxg5 Re1 Bd7 Rb6 Rc8 Rxe5+ Kd8 Bb3 Kc7
 31.  Nxg5    (0:03.325)      Bxd1    (0:05.666)

Floyd(C)(2244)[327] whispers: depth=9 score=99.93 time=0.77 node=115634 speed=150174 pv=Bc6+ Kd8 Nf7+ Kc8 Nd6+ Kd8 Rd7#
 32.  Bc6+    (0:00.782)      Kf8     (0:07.388)

Floyd(C)(2244)[327] whispers: depth=3 score=99.97 time=0.00 node=354 speed=0 pv=Nxh7+ Rxh7 Rg7
 33.  Nxh7+   (0:00.100)      Rxh7    (0:09.833)

Floyd(C)(2244)[327] whispers: depth=12 score=8.23 time=20.49 node=1876960 speed=91603 pv=Rxh7 Kg8 Rg7+ Kh8 Bxa8 Bxc2 Bc6 e4 Ra7 e3 fxe3 f5 Rxa5 Bxa4 Bxa4
 34.  Rxh7    (0:07.747)      Rc8     (0:18.823)
 35.  Rh8+    (0:01.431)      Ke7     (0:05.406)
 36.  Rxc8    (0:09.119)
      {Black resigns} 1-0

|Todo| Rename pawnKingHash [qa]

Because we want to add bishop colors as well, and
reduce the king component to their files.

Candidates (best first):
        subHash <-- looks best
        miniHash
        pkbHash
        coarseHash
        hash2
        pawnHash
        structHash
        xHash
        pHash
        slowHash

